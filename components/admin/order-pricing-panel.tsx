"use client"

import { useState, useEffect } from "react"
import { useOrders } from "@/contexts/order-context"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Switch } from "@/components/ui/switch"
import { Alert, AlertDescription } from "@/components/ui/alert"
import {
  DollarSign,
  Edit,
  Save,
  Search,
  Package,
  Clock,
  CheckCircle,
  AlertTriangle,
  RotateCcw,
  Download,
  FileText,
  Bell,
  Activity,
  Receipt,
  Zap,
  TrendingUp,
  TrendingDown,
  Shield,
  HardDrive,
  Database,
} from "lucide-react"
import type { Order, OrderItem } from '@/contexts/order-context'
import { useInventory } from '@/contexts/inventory-context'

export function OrderPricingPanel() {
  const { orders, bills, approveOrder, rejectOrder, updateOrder } = useOrders()
  const { setInventory, inventory, updateItemPrice } = useInventory()
  const [notification, setNotification] = useState<{ message: string; type: "success" | "error" | null }>({ message: "", type: null })
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null)
  const [searchTerm, setSearchTerm] = useState("")
  const [statusFilter, setStatusFilter] = useState("all")
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)
  const [itemPrices, setItemPrices] = useState<Record<string, number>>({})
  const [adminNotes, setAdminNotes] = useState("")
  const [recentActivity, setRecentActivity] = useState<string[]>([])
  const [loadingOrderId, setLoadingOrderId] = useState<string | null>(null)

  // Real-time activity monitoring
  useEffect(() => {
    const checkForNewActivity = () => {
      const newActivities: string[] = []

      orders.forEach((order) => {
        const timeSinceModified = order.lastModified
          ? Date.now() - new Date(order.lastModified).getTime()
          : Number.POSITIVE_INFINITY

        // Show activities from last 5 minutes
        if (timeSinceModified < 5 * 60 * 1000) {
          if (order.status === "pending" && order.salesmanPricing) {
            newActivities.push(`ðŸ†• New order ${order.orderNumber} submitted by ${order.salesmanName}`)
          }
          if (order.status === "salesman_adjusted") {
            newActivities.push(`ðŸ”§ Order ${order.orderNumber} price adjusted by ${order.salesmanName}`)
          }
          if (order.billGenerated && order.autoGeneratedBill) {
            newActivities.push(`ðŸ“„ Auto-bill generated for order ${order.orderNumber}`)
          }
        }
      })

      setRecentActivity(newActivities.slice(0, 5)) // Show last 5 activities
    }

    checkForNewActivity()
    const interval = setInterval(checkForNewActivity, 10000) // Check every 10 seconds

    return () => clearInterval(interval)
  }, [orders])

  const handleEditOrder = (order: Order) => {
    setSelectedOrder({ ...order })

    // Initialize item prices with salesman prices or existing admin prices
    const prices: Record<string, number> = {}
    order.items.forEach((item) => {
      prices[item.id] = order.adminPricing?.itemPrices?.[item.id] || item.salesmanPrice || 0
    })
    setItemPrices(prices)
    setAdminNotes(order.adminNotes || "")
    setIsEditDialogOpen(true)
  }

  const handleReopenOrder = (order: Order) => {
    // Allow reopening orders that have been priced
    if (order.status === "admin_priced" || order.status === "salesman_adjusted" || order.status === "approved") {
      handleEditOrder({ ...order, status: "pending" })
    }
  }

  const handleUpdateItemPrice = (itemId: string, price: number) => {
    setItemPrices((prev) => ({
      ...prev,
      [itemId]: price,
    }))
  }

  const calculateTotals = () => {
    if (!selectedOrder) return { subtotal: 0, tax: 0, total: 0 }

    const subtotal = selectedOrder.items.reduce((sum, item) => {
      const price = itemPrices[item.id] || 0
      return sum + price * item.requestedQuantity
    }, 0)

    const tax = subtotal * 0.1 // 10% tax
    const total = subtotal + tax

    return { subtotal, tax, total }
  }

  const handleSaveAdminPricing = () => {
    if (!selectedOrder) return;

    const { subtotal, tax, total } = calculateTotals();

    // Update each item's unitPrice to the admin-set price
    const updatedItems = selectedOrder.items.map(item => ({
      ...item,
      unitPrice: itemPrices[item.id] || 0
    }));

    // Save the updated order with new item prices
    updateOrder(selectedOrder.id, {
      items: updatedItems,
      // Optionally, you can store subtotal, tax, total if needed
    });

    // Also update inventory unitCost for each item
    Object.entries(itemPrices).forEach(([itemId, newPrice]) => {
      console.log('[AdminPricing] Updating inventory for item', itemId, 'to price', newPrice);
      updateItemPrice(itemId, newPrice);
    });

    setIsEditDialogOpen(false);
    setSelectedOrder(null);
  }

  const handleApproveOrder = async (orderId: string) => {
    setLoadingOrderId(orderId)
    try {
      await approveOrder(orderId)
      setNotification({ message: `Order #${orderId} has been approved successfully.`, type: "success" })
      setTimeout(() => setNotification({ message: "", type: null }), 3000)
    } catch (error) {
      setNotification({ message: `Failed to approve order #${orderId}. Please try again.`, type: "error" })
      setTimeout(() => setNotification({ message: "", type: null }), 3000)
    } finally {
      setLoadingOrderId(null)
    }
  }

  const handleRejectOrder = async (orderId: string) => {
    const reason = prompt("Please provide a reason for rejection:")
    if (!reason) return
    setLoadingOrderId(orderId)
    try {
      await rejectOrder(orderId, reason)
      setNotification({ message: `Order #${orderId} has been rejected.`, type: "success" })
      setTimeout(() => setNotification({ message: "", type: null }), 3000)
    } catch (error) {
      setNotification({ message: `Failed to reject order #${orderId}. Please try again.`, type: "error" })
      setTimeout(() => setNotification({ message: "", type: null }), 3000)
    } finally {
      setLoadingOrderId(null)
    }
  }

  const generateRegularInvoice = (order: Order) => {
    const currentPricing = order.finalPricing || order.adminPricing
    if (!currentPricing) return

    const pdfContent = generateInvoiceHTML(order, currentPricing, false)
    downloadAndPrintInvoice(pdfContent, `Regular-Invoice-${order.id}.html`)
  }

  const generateGSTInvoice = (order: Order) => {
    const currentPricing = order.finalPricing || order.adminPricing
    if (!currentPricing) return

    const pdfContent = generateInvoiceHTML(order, currentPricing, true)
    downloadAndPrintInvoice(pdfContent, `GST-Invoice-${order.id}.html`)
  }

  const generateInvoiceHTML = (order: Order, pricing: any, isGST: boolean) => {
    const totalCases = order.items.reduce((sum, item) => sum + item.requestedQuantity, 0)
    const totalBottles = order.items.reduce((sum, item) => sum + item.requestedQuantity * item.bottlesPerCase, 0)
    const gstItems = order.items.filter((item) => item.gstBill === "yes")
    const hasGSTItems = gstItems.length > 0

    return `
      <!DOCTYPE html>
      <html>
      <head>
        <title>${isGST ? "GST" : "Regular"} Invoice - ${order.id}</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; }
          .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #1f2937; padding-bottom: 20px; }
          .company-name { font-size: 28px; font-weight: bold; color: #1f2937; }
          .invoice-title { font-size: 20px; color: ${isGST ? "#dc2626" : "#059669"}; margin-top: 5px; font-weight: bold; }
          .invoice-type { background-color: ${isGST ? "#fef2f2" : "#f0fdf4"}; color: ${isGST ? "#dc2626" : "#059669"}; padding: 8px 16px; border-radius: 8px; display: inline-block; margin-top: 10px; }
          .order-info { display: flex; justify-content: space-between; margin: 30px 0; }
          .info-section { flex: 1; margin-right: 20px; padding: 15px; border: 1px solid #e5e7eb; border-radius: 8px; }
          .info-title { font-weight: bold; color: #374151; margin-bottom: 8px; font-size: 16px; }
          .info-value { color: #6b7280; margin-bottom: 8px; }
          table { width: 100%; border-collapse: collapse; margin: 20px 0; }
          th, td { border: 1px solid #d1d5db; padding: 12px; text-align: left; }
          th { background-color: ${isGST ? "#fef2f2" : "#f3f4f6"}; font-weight: bold; color: ${isGST ? "#dc2626" : "#374151"}; }
          .summary { margin-top: 30px; text-align: right; }
          .summary-row { margin: 8px 0; font-size: 16px; }
          .total-row { font-weight: bold; font-size: 20px; color: #1f2937; border-top: 2px solid #374151; padding-top: 10px; }
          .footer { margin-top: 40px; text-align: center; color: #6b7280; font-size: 12px; border-top: 1px solid #e5e7eb; padding-top: 20px; }
          .status-badge { background-color: #dcfce7; color: #166534; padding: 6px 12px; border-radius: 6px; font-size: 14px; font-weight: bold; }
          .currency { color: #059669; font-weight: bold; }
          .adjustment { color: #7c3aed; font-style: italic; }
          .gst-highlight { background-color: #fef2f2; }
          .gst-info { background-color: #fef2f2; padding: 15px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #dc2626; }
          .admin-approved { background-color: #f0fdf4; border-left: 4px solid #059669; padding: 10px; margin: 10px 0; }
        </style>
      </head>
      <body>
        <div class="header">
          <div class="company-name">WIMS - Ekta Corporation</div>
          <div class="invoice-title">${isGST ? "GST TAX INVOICE" : "COMMERCIAL INVOICE"}</div>
          <div class="invoice-type">${isGST ? "GST BILLING DOCUMENT" : "REGULAR BILLING DOCUMENT"}</div>
        </div>

        <div class="admin-approved">
          <strong>âœ… ADMIN APPROVED PRICING</strong><br>
          This invoice contains official pricing set by admin with final authority.
        </div>

        ${
          isGST && hasGSTItems
            ? `
          <div class="gst-info">
            <strong>GST Invoice Information:</strong><br>
            This invoice includes GST-applicable items with proper tax calculations.<br>
            GST Registration: [Company GST Number]<br>
            Place of Supply: [State/Location]
          </div>
        `
            : ""
        }

        <div class="order-info">
          <div class="info-section">
            <div class="info-title">Order Details</div>
            <div class="info-value">Order ID: ${order.id}</div>
            <div class="info-value">Order Number: ${order.orderNumber || "N/A"}</div>
            <div class="info-value">Date: ${new Date(order.createdAt).toLocaleDateString()}</div>
            <div class="info-value">Status: <span class="status-badge">${order.status.toUpperCase()}</span></div>
            <div class="info-value">Invoice Type: <strong>${isGST ? "GST Invoice" : "Regular Invoice"}</strong></div>
          </div>
          <div class="info-section">
            <div class="info-title">Salesman Information</div>
            <div class="info-value">Name: ${order.salesmanName}</div>
            <div class="info-value">ID: ${order.salesmanId}</div>
          </div>
          <div class="info-section">
            <div class="info-title">Client Information</div>
            <div class="info-value">Company: ${order.clientName}</div>
            <div class="info-value">Client ID: ${order.clientId}</div>
          </div>
        </div>

        <table>
          <thead>
            <tr ${isGST ? 'class="gst-highlight"' : ""}>
              <th>S.No.</th>
              <th>Product Description</th>
              <th>Volume</th>
              <th>Cases</th>
              <th>Salesman Price</th>
              <th>Official Price</th>
              <th>Line Total (â‚¹)</th>
            </tr>
          </thead>
          <tbody>
            ${order.items
              .filter((item) => !isGST || item.gstBill === "yes")
              .map(
                (item, index) => `
              <tr ${isGST && item.gstBill === "yes" ? 'class="gst-highlight"' : ""}>
                <td>${index + 1}</td>
                <td>${item.name}</td>
                <td>${item.volume}</td>
                <td>${item.requestedQuantity}</td>
                <td class="currency">â‚¹${(item.unitPrice || 0).toFixed(2)}</td>
                <td class="currency">â‚¹${(itemPrices[item.id] || 0).toFixed(2)}</td>
                <td class="currency">â‚¹${((itemPrices[item.id] || item.unitPrice || 0) * item.requestedQuantity).toFixed(2)}</td>
              </tr>
            `,
              )
              .join("")}
          </tbody>
        </table>

        <div class="summary">
          <div class="summary-row">Total Product Types: ${isGST ? order.items.filter((item) => item.gstBill === "yes").length : order.items.length}</div>
          <div class="summary-row">Total Cases: ${totalCases}</div>
          <div class="summary-row">Total Bottles: ${totalBottles}</div>
          <div class="summary-row">Subtotal: â‚¹${pricing.subtotal.toFixed(2)}</div>
          <div class="summary-row">Tax (10%): â‚¹${pricing.tax.toFixed(2)}</div>
          ${isGST ? '<div class="summary-row">GST Included: Yes</div>' : ""}
          <div class="summary-row total-row currency">Final Total: â‚¹${pricing.total.toFixed(2)}</div>
        </div>

        ${
          order.adminNotes
            ? `
          <div style="margin-top: 30px; padding: 15px; background-color: #f3f4f6; border-radius: 8px;">
            <div class="info-title">Admin Notes:</div>
            <div class="info-value">${order.adminNotes}</div>
          </div>
        `
            : ""
        }

        ${
          order.salesmanAdjustmentNotes
            ? `
          <div style="margin-top: 20px; padding: 15px; background-color: #faf5ff; border-radius: 8px;">
            <div class="info-title">Salesman Adjustment Notes:</div>
            <div class="info-value adjustment">${order.salesmanAdjustmentNotes}</div>
          </div>
        `
            : ""
        }

        <div class="footer">
          <p><strong>This is an official ${isGST ? "GST" : "regular"} invoice with admin-approved pricing.</strong></p>
          <p>Final pricing authority: Admin | Salesman adjustment range: Â±â‚¹10-â‚¹15</p>
          <p>Generated on ${new Date().toLocaleString()}</p>
          <p>WIMS - Warehouse Inventory Management System | Ekta Corporation</p>
        </div>
      </body>
      </html>
    `
  }

  const downloadAndPrintInvoice = (content: string, filename: string) => {
    const blob = new Blob([content], { type: "text/html" })
    const url = URL.createObjectURL(blob)
    const link = document.createElement("a")
    link.href = url
    link.download = filename
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)

    const printWindow = window.open("", "_blank")
    if (printWindow) {
      printWindow.document.write(content)
      printWindow.document.close()
      setTimeout(() => {
        printWindow.print()
        printWindow.close()
      }, 500)
    }
  }

  const getStatusBadge = (status: string) => {
    const variants = {
      pending: "secondary",
      admin_priced: "default",
      salesman_adjusted: "outline",
      approved: "default",
      rejected: "destructive",
      completed: "default",
    } as const

    const labels = {
      pending: "PENDING PRICING",
      admin_priced: "ADMIN PRICED",
      salesman_adjusted: "SALESMAN ADJUSTED",
      approved: "APPROVED",
      rejected: "REJECTED",
      completed: "COMPLETED",
    }

    return (
      <Badge variant={variants[status as keyof typeof variants] || "default"}>
        {labels[status as keyof typeof labels] || status.toUpperCase()}
      </Badge>
    )
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "pending":
        return <Clock className="w-4 h-4 text-yellow-600" />
      case "admin_priced":
        return <DollarSign className="w-4 h-4 text-blue-600" />
      case "salesman_adjusted":
        return <Edit className="w-4 h-4 text-purple-600" />
      case "approved":
        return <CheckCircle className="w-4 h-4 text-green-600" />
      case "rejected":
        return <AlertTriangle className="w-4 h-4 text-red-600" />
      default:
        return <Package className="w-4 h-4 text-gray-600" />
    }
  }

  // Sort orders by order number (sequential)
  const extractOrderNum = (orderNumber?: string) => {
    if (!orderNumber) return 0
    const match = orderNumber.match(/\d+/)
    return match ? parseInt(match[0], 10) : 0
  }
  const sortedOrders = [...orders].sort((a, b) => {
    const aNum = extractOrderNum(a.orderNumber)
    const bNum = extractOrderNum(b.orderNumber)
    return bNum - aNum // Most recent first
  })

  const filteredOrders = sortedOrders.filter((order) => {
    const matchesSearch =
      order.salesmanName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      order.id.toLowerCase().includes(searchTerm.toLowerCase()) ||
      order.clientName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (order.orderNumber && order.orderNumber.toString().includes(searchTerm))

    const matchesStatus = statusFilter === "all" || order.status === statusFilter

    return matchesSearch && matchesStatus
  })

  const pendingOrders = filteredOrders.filter((order) => order.status === "pending")
  const adminPricedOrders = filteredOrders.filter((order) => order.status === "admin_priced")
  const adjustedOrders = filteredOrders.filter((order) => order.status === "salesman_adjusted")
  const billsGenerated = bills.filter((bill) => filteredOrders.some((order) => order.id === bill.orderId)).length

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">Order Pricing Management</h1>
          <p className="text-muted-foreground">Set official pricing and manage salesman price adjustments</p>
        </div>
        <div className="flex items-center gap-2">
          <Badge variant="outline" className="text-green-600 border-green-300">
            <Activity className="w-3 h-3 mr-1" />
            Real-time Updates
          </Badge>
        </div>
      </div>

      {/* Real-time Activity Feed */}
      {recentActivity.length > 0 && (
        <Alert className="border-blue-200 bg-blue-50">
          <Bell className="h-4 w-4 text-blue-600" />
          <AlertDescription>
            <div className="space-y-1">
              <strong className="text-blue-800">ðŸ”” Recent Salesman Activity</strong>
              {recentActivity.map((activity, index) => (
                <div key={index} className="text-sm text-blue-700 flex items-center gap-2">
                  <Zap className="w-3 h-3" />
                  {activity}
                </div>
              ))}
            </div>
          </AlertDescription>
        </Alert>
      )}

      {/* Search and Filters */}
      <Card>
        <CardContent className="p-4">
          <div className="flex items-center space-x-4">
            <div className="flex-1 relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
              <Input
                placeholder="Search orders by salesman, order ID, order number, or client..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger className="w-48">
                <SelectValue placeholder="Filter by status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Orders</SelectItem>
                <SelectItem value="pending">Pending Pricing</SelectItem>
                <SelectItem value="admin_priced">Admin Priced</SelectItem>
                <SelectItem value="salesman_adjusted">Salesman Adjusted</SelectItem>
                <SelectItem value="approved">Approved</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </CardContent>
      </Card>

      {/* Quick Stats */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <Clock className="w-8 h-8 text-yellow-600" />
              <div>
                <p className="text-sm font-medium">Pending Pricing</p>
                <p className="text-2xl font-bold">{pendingOrders.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <DollarSign className="w-8 h-8 text-blue-600" />
              <div>
                <p className="text-sm font-medium">Admin Priced</p>
                <p className="text-2xl font-bold">{adminPricedOrders.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <Edit className="w-8 h-8 text-purple-600" />
              <div>
                <p className="text-sm font-medium">Salesman Adjusted</p>
                <p className="text-2xl font-bold">{adjustedOrders.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <Receipt className="w-8 h-8 text-orange-600" />
              <div>
                <p className="text-sm font-medium">Bills Generated</p>
                <p className="text-2xl font-bold">{billsGenerated}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center space-x-2">
              <Package className="w-8 h-8 text-green-600" />
              <div>
                <p className="text-sm font-medium">Total Orders</p>
                <p className="text-2xl font-bold">{orders.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Admin Authority Notice */}
      <Alert className="border-green-200 bg-green-50">
        <CheckCircle className="h-4 w-4 text-green-600" />
        <AlertDescription>
          <strong className="text-green-800">ðŸŽ¯ ADMIN PRICING AUTHORITY</strong>
          <br />
          <span className="text-green-700">
            You have final pricing authority. Salesmen can only adjust prices by Â±â‚¹10-â‚¹15 after you set the base price.
            All salesman actions are reflected here in real-time.
          </span>
        </AlertDescription>
      </Alert>

      {/* ENHANCED PERMANENT DATA PROTECTION ALERT */}
      <Alert className="border-green-200 bg-green-50">
        <Shield className="h-4 w-4 text-green-600" />
        <AlertDescription>
          <div className="space-y-2">
            <div className="flex items-center gap-2">
              <strong className="text-green-800">ðŸ”’ PERMANENT DATA PROTECTION - QUADRUPLE REDUNDANCY</strong>
              <Badge variant="outline" className="text-green-700 border-green-300">
                100% Guaranteed
              </Badge>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-3 text-sm">
              <div className="space-y-1">
                <div className="flex items-center gap-2">
                  <HardDrive className="w-3 h-3 text-green-600" />
                  <span>
                    <strong>Orders Protected:</strong> {orders.length} orders (4 backup copies each)
                  </span>
                </div>
                <div className="flex items-center gap-2">
                  <Database className="w-3 h-3 text-green-600" />
                  <span>
                    <strong>Backup Levels:</strong> Primary + Backup + Emergency + Archive
                  </span>
                </div>
              </div>
              <div className="space-y-1">
                <div className="flex items-center gap-2">
                  <Clock className="w-3 h-3 text-green-600" />
                  <span>
                    <strong>Auto-Save:</strong> Immediate on every action
                  </span>
                </div>
                <div className="flex items-center gap-2">
                  <CheckCircle className="w-3 h-3 text-green-600" />
                  <span>
                    <strong>Data Persistence:</strong> PERMANENT & UNLOSABLE
                  </span>
                </div>
              </div>
            </div>
            <div className="mt-3 p-2 bg-green-100 rounded border-l-4 border-green-500">
              <p className="text-xs text-green-800 font-medium">
                âœ… <strong>ADMIN GUARANTEE:</strong> All orders and pricing data are permanently saved with quadruple
                redundancy. No data will ever be lost, regardless of browser actions or system restarts. Complete order
                history remains accessible at all times.
              </p>
            </div>
          </div>
        </AlertDescription>
      </Alert>

      {/* Orders Table */}
      <Card>
        <CardHeader>
          <CardTitle>Order Pricing Management</CardTitle>
          <CardDescription>Set official pricing and manage price adjustments for fruit juice orders</CardDescription>
        </CardHeader>
        <CardContent>
          {filteredOrders.length === 0 ? (
            <div className="text-center py-8">
              <Package className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <p className="text-gray-500">No orders found</p>
            </div>
          ) : (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Order #</TableHead>
                  <TableHead>Order ID</TableHead>
                  <TableHead>Salesman</TableHead>
                  <TableHead>Client</TableHead>
                  <TableHead>Items</TableHead>
                  <TableHead>Created</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Pricing</TableHead>
                  <TableHead>Bills</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredOrders.map((order) => {
                  const currentPricing = order.finalPricing || order.adminPricing
                  const canReopen = ["admin_priced", "salesman_adjusted", "approved"].includes(order.status)
                  const canGenerateInvoice = currentPricing && order.status !== "pending"
                  const orderBills = bills.filter((bill) => bill.orderId === order.id)
                  const isRecentlyModified =
                    order.lastModified && Date.now() - new Date(order.lastModified).getTime() < 2 * 60 * 1000 // 2 minutes

                  return (
                    <TableRow key={order.id} className={isRecentlyModified ? "bg-blue-50" : ""}>
                      <TableCell className="font-bold text-blue-600">
                        <div className="flex items-center gap-2">
                          {order.orderNumber ? order.orderNumber : "N/A"}
                          {isRecentlyModified && <Zap className="w-3 h-3 text-blue-500" />}
                        </div>
                      </TableCell>
                      <TableCell className="font-medium">{order.id}</TableCell>
                      <TableCell>{order.salesmanName}</TableCell>
                      <TableCell>{order.clientName}</TableCell>
                      <TableCell>{order.items.length} types</TableCell>
                      <TableCell>{new Date(order.createdAt).toLocaleDateString()}</TableCell>
                      <TableCell>
                        <div className="flex items-center space-x-2">
                          {getStatusIcon(order.status)}
                          {getStatusBadge(order.status)}
                        </div>
                      </TableCell>
                      <TableCell>
                        {currentPricing ? (
                          <span className="font-medium">â‚¹{currentPricing.total.toFixed(2)}</span>
                        ) : (
                          <span className="text-muted-foreground">Not priced</span>
                        )}
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-1">
                          <span className="text-sm">{orderBills.length}</span>
                          {order.autoGeneratedBill && (
                            <Badge variant="outline" className="text-xs">
                              Auto
                            </Badge>
                          )}
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center space-x-2">
                          {(order.status === "pending" || order.status === "salesman_adjusted") && (
                            <Button variant="ghost" size="sm" onClick={() => handleEditOrder(order)}>
                              <Edit className="w-4 h-4" />
                            </Button>
                          )}
                          {canReopen && (
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => handleReopenOrder(order)}
                              title="Reopen for editing"
                            >
                              <RotateCcw className="w-4 h-4" />
                            </Button>
                          )}
                          {/* Approve/Reject for pending orders */}
                          {order.status === "pending" && (
                            <>
                              <Button variant="ghost" size="sm" onClick={() => handleApproveOrder(order.id)} disabled={loadingOrderId === order.id}>
                                {loadingOrderId === order.id ? "Approving..." : <CheckCircle className="w-4 h-4" />}
                              </Button>
                              <Button variant="ghost" size="sm" onClick={() => handleRejectOrder(order.id)} disabled={loadingOrderId === order.id}>
                                {loadingOrderId === order.id ? "Rejecting..." : <AlertTriangle className="w-4 h-4" />}
                              </Button>
                            </>
                          )}
                          {order.status === "admin_priced" && (
                            <Button variant="ghost" size="sm" onClick={() => handleApproveOrder(order.id)} disabled={loadingOrderId === order.id}>
                              {loadingOrderId === order.id ? "Approving..." : <CheckCircle className="w-4 h-4" />}
                            </Button>
                          )}
                          {order.status === "salesman_adjusted" && (
                            <>
                              <Button variant="ghost" size="sm" onClick={() => handleApproveOrder(order.id)} disabled={loadingOrderId === order.id}>
                                {loadingOrderId === order.id ? "Approving..." : <CheckCircle className="w-4 h-4" />}
                              </Button>
                              <Button variant="ghost" size="sm" onClick={() => handleRejectOrder(order.id)} disabled={loadingOrderId === order.id}>
                                {loadingOrderId === order.id ? "Rejecting..." : <AlertTriangle className="w-4 h-4" />}
                              </Button>
                            </>
                          )}
                          {canGenerateInvoice && (
                            <>
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => generateRegularInvoice(order)}
                                title="Generate Regular Invoice"
                              >
                                <Download className="w-4 h-4" />
                              </Button>
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => generateGSTInvoice(order)}
                                title="Generate GST Invoice"
                              >
                                <FileText className="w-4 h-4" />
                              </Button>
                            </>
                          )}
                        </div>
                      </TableCell>
                    </TableRow>
                  )
                })}
              </TableBody>
            </Table>
          )}
        </CardContent>
      </Card>

      {/* Edit Order Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent className="max-w-5xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Set Official Pricing - {selectedOrder?.id}</DialogTitle>
            <DialogDescription>
              Set official admin pricing for order from {selectedOrder?.salesmanName} for client{" "}
              {selectedOrder?.clientName}
            </DialogDescription>
          </DialogHeader>

          {selectedOrder && (
            <div className="space-y-6">
              {/* Admin Authority Notice */}
              <Alert className="border-green-200 bg-green-50">
                <CheckCircle className="h-4 w-4 text-green-600" />
                <AlertDescription>
                  <strong className="text-green-800">ðŸŽ¯ ADMIN PRICING AUTHORITY</strong>
                  <br />
                  <span className="text-green-700">
                    You are setting the official base price. Salesman can only adjust by Â±â‚¹10-â‚¹15 if you allow it.
                  </span>
                </AlertDescription>
              </Alert>

              {/* Order Info */}
              <div className="grid grid-cols-4 gap-4 p-4 bg-muted/50 rounded-lg">
                <div>
                  <Label className="text-sm font-medium">Order Number</Label>
                  <p className="text-sm font-bold">{selectedOrder.orderNumber ? selectedOrder.orderNumber : "N/A"}</p>
                </div>
                <div>
                  <Label className="text-sm font-medium">Salesman</Label>
                  <p className="text-sm">{selectedOrder.salesmanName}</p>
                </div>
                <div>
                  <Label className="text-sm font-medium">Client</Label>
                  <p className="text-sm">{selectedOrder.clientName}</p>
                </div>
                <div>
                  <Label className="text-sm font-medium">Order Date</Label>
                  <p className="text-sm">{new Date(selectedOrder.createdAt).toLocaleDateString()}</p>
                </div>
              </div>

              {/* Salesman Adjustment Info */}
              {selectedOrder.status === "salesman_adjusted" && selectedOrder.salesmanAdjustmentNotes && (
                <Alert>
                  <Edit className="h-4 w-4" />
                  <AlertDescription>
                    <strong>Salesman Adjustment:</strong> {selectedOrder.salesmanAdjustmentNotes}
                  </AlertDescription>
                </Alert>
              )}

              {/* Order Notes */}
              {selectedOrder.notes && (
                <div className="p-3 bg-blue-50 border border-blue-200 rounded-lg">
                  <Label className="text-sm font-medium text-blue-800">Order Notes from Salesman:</Label>
                  <p className="text-sm text-blue-700 mt-1">{selectedOrder.notes}</p>
                </div>
              )}

              {/* Items Pricing Table */}
              <div className="space-y-4">
                <Label className="text-lg font-semibold">Set Official Prices (Per Case)</Label>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>S.No.</TableHead>
                      <TableHead>Description</TableHead>
                      <TableHead>Volume</TableHead>
                      <TableHead>Cases</TableHead>
                      <TableHead>Salesman Price</TableHead>
                      <TableHead>Official Price</TableHead>
                      <TableHead>Line Total</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {selectedOrder.items.map((item, index) => {
                      const salesmanPrice = item.unitPrice || 0
                      const adminPrice = itemPrices[item.id] || 0
                      const lineTotal = adminPrice * item.requestedQuantity

                      return (
                        <TableRow key={item.id}>
                          <TableCell className="font-medium">{index + 1}</TableCell>
                          <TableCell>
                            <div>
                              <p className="font-medium">{item.name}</p>
                              <p className="text-xs text-muted-foreground">{item.category}</p>
                            </div>
                          </TableCell>
                          <TableCell>{item.volume}</TableCell>
                          <TableCell className="font-medium">{item.requestedQuantity}</TableCell>
                          <TableCell>
                            <span className="text-muted-foreground">â‚¹{salesmanPrice.toFixed(2)}</span>
                          </TableCell>
                          <TableCell>
                            <div className="flex items-center space-x-1">
                              <span>â‚¹</span>
                              <Input
                                type="number"
                                step="0.01"
                                value={itemPrices[item.id] || ""}
                                onChange={(e) => handleUpdateItemPrice(item.id, Number.parseFloat(e.target.value) || 0)}
                                className="w-24"
                                placeholder="0.00"
                              />
                            </div>
                          </TableCell>
                          <TableCell className="font-medium">â‚¹{lineTotal.toFixed(2)}</TableCell>
                        </TableRow>
                      )
                    })}
                  </TableBody>
                </Table>
              </div>

              {/* Order Totals */}
              <div className="space-y-4">
                <div className="flex justify-end">
                  <div className="w-80 space-y-2 p-4 bg-muted/50 rounded-lg">
                    <div className="flex justify-between">
                      <span>Subtotal:</span>
                      <span>â‚¹{calculateTotals().subtotal.toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Tax (10%):</span>
                      <span>â‚¹{calculateTotals().tax.toFixed(2)}</span>
                    </div>
                    <div className="border-t pt-2">
                      <div className="flex justify-between font-bold text-lg">
                        <span>Total:</span>
                        <span>â‚¹{calculateTotals().total.toFixed(2)}</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Admin Notes */}
              <div className="space-y-2">
                <Label htmlFor="adminNotes">Admin Notes</Label>
                <Textarea
                  id="adminNotes"
                  value={adminNotes}
                  onChange={(e) => setAdminNotes(e.target.value)}
                  placeholder="Add notes about pricing decisions..."
                  rows={3}
                />
              </div>

              {/* Actions */}
              <div className="flex justify-between">
                <div className="space-x-2">
                  <Button onClick={handleSaveAdminPricing}>
                    <Save className="w-4 h-4 mr-2" />
                    Set Official Pricing
                  </Button>
                  <Button variant="outline" onClick={() => setIsEditDialogOpen(false)}>
                    Cancel
                  </Button>
                </div>
              </div>
            </div>
          )}
        </DialogContent>
      </Dialog>

      {notification.message && (
        <Alert variant={notification.type === "success" ? "default" : "destructive"} className="mb-4">
          <AlertDescription>{notification.message}</AlertDescription>
        </Alert>
      )}
    </div>
  )
}
